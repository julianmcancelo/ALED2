package beltran;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */


import beltran.Clases.Conexion;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 *
 * @author julia
 */
public class BuscadorAlumnos extends javax.swing.JFrame {



    private final DefaultTableModel modeloTabla;
    /**
     * Creates new form Busqueda
     */
     public BuscadorAlumnos() {
        initComponents();
             // Configuración adicional
        configurarTabla();
        configurarVentana();
        modeloTabla = new DefaultTableModel(
            new Object[][] {},
            new String[] {
                "Nombres", "Apellido", "DNI", "Legajo", "Carrera", "Domicilio", "Altura", 
                "Localidad", "Provincia", "Fecha Nacimiento", "Año Ingreso", "Email", "Estado"
            }
        );
        tablaResultados.setModel(modeloTabla);
           // Configurar el renderizador para la columna "Estado"
        tablaResultados.getColumnModel().getColumn(12).setCellRenderer(new EstadoCellRenderer());
    }
    
     
     
     
     
private void configurarTabla() {
        // Configuración adicional de la tabla
        tablaResultados.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tablaResultados.setRowHeight(30); // Ajusta la altura de las filas si es necesario
        
        // Ajustar el ancho de las columnas para adaptarse al contenido
        for (int i = 0; i < tablaResultados.getColumnCount(); i++) {
            tablaResultados.getColumnModel().getColumn(i).setPreferredWidth(150); // Ajusta según el tamaño de columna que desees
        }
    }

    private void configurarVentana() {
        // Configuración adicional de la ventana principal
        setTitle("Buscador de Alumnos");
        setSize(1000, 600);
    setLocationRelativeTo(null);
    setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); // Solo cierra la ventana actual

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtFiltro = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaResultados = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        tablaResultados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombres", "Apellido", "N° DNI", "Legajo N°", "Carrera", "Domicilio", "Altura", "Localidad", "Provincia", "Fecha de Nacimiento", "Año de Ingreso", "Email Institutcional", "Estado"
            }
        ));
        jScrollPane1.setViewportView(tablaResultados);

        jLabel1.setText("Ingrese nombre, apellido o DNI para buscar");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuscar)
                .addContainerGap(484, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
    buscar();
    }//GEN-LAST:event_btnBuscarActionPerformed
 
    private void buscar() {
        String filtro = txtFiltro.getText().trim();
        modeloTabla.setRowCount(0); // Limpiar la tabla antes de llenar con nuevos datos

        try (Connection conn = Conexion.getConnection()) {
            String sql = "SELECT * FROM alumnos WHERE nombres LIKE ? OR apellido LIKE ? OR dni LIKE ?";
            try (PreparedStatement ps = conn.prepareStatement(sql)) {
                String filtroWildcard = "%" + filtro + "%";
                ps.setString(1, filtroWildcard);
                ps.setString(2, filtroWildcard);
                ps.setString(3, filtroWildcard);

                try (ResultSet rs = ps.executeQuery()) {
                    while (rs.next()) {
                        String nombres = rs.getString("nombres");
                        String apellido = rs.getString("apellido");
                        String dni = rs.getString("dni");
                        String legajo = rs.getString("legajo");
                        String carrera = rs.getString("carrera");
                        String domicilio = rs.getString("domicilio");
                        String altura = rs.getString("altura");
                        String localidad = rs.getString("localidad");
                        String provincia = rs.getString("provincia");
                        String fechaNacimiento = rs.getString("fecha_nacimiento");
                        int anoIngreso = rs.getInt("ano_ingreso");
                        String email = rs.getString("email");
                        String estado = rs.getString("estado");

                        modeloTabla.addRow(new Object[]{nombres, apellido, dni, legajo, carrera, domicilio, altura, localidad, provincia, fechaNacimiento, anoIngreso, email, estado});
                    }
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error en la conexión a la base de datos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BuscadorAlumnos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BuscadorAlumnos().setVisible(true);
            }
        });
    }

    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaResultados;
    private javax.swing.JTextField txtFiltro;
    // End of variables declaration//GEN-END:variables

    // Clase interna para el renderizador de celdas
    // Clase interna para el renderizador de celdas
private static class EstadoCellRenderer extends JLabel implements TableCellRenderer {
    public EstadoCellRenderer() {
        setOpaque(true); // Hacer que el fondo sea visible
        setHorizontalAlignment(SwingConstants.CENTER); // Centrar el texto horizontalmente
    }

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        String estado = (String) value;

        // Cambiar el color de fondo según el valor del estado
        switch (estado) {
            case "Activo":
                setBackground(Color.GREEN);
                break;
            case "Inactivo":
                setBackground(Color.RED);
                break;
            case "Pendiente":
                setBackground(Color.YELLOW);
                break;
            default:
                setBackground(Color.WHITE);
                break;
        }

        // Configurar el texto de la celda
        setText(estado);

        // Ajustar el color del texto y el borde de la celda según el estado de selección
        if (isSelected) {
            setForeground(Color.WHITE);
            setBorder(BorderFactory.createLineBorder(Color.BLUE));
        } else {
            setForeground(Color.BLACK);
            setBorder(BorderFactory.createEmptyBorder());
        }

        return this;
    }
}
}